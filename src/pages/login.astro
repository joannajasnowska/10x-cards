---
import Layout from "../layouts/Layout.astro";
import { createSupabaseServerClient } from "../db/supabase.client";

// Check if user is already authenticated
const supabase = createSupabaseServerClient({
  cookies: Astro.cookies,
  headers: Astro.request.headers,
});

const {
  data: { user },
} = await supabase.auth.getUser();

// Redirect if already logged in
if (user) {
  return Astro.redirect("/generator");
}

// Set prerender to false to enable SSR
export const prerender = false;
---

<Layout title="Logowanie - 10x Cards">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="w-full max-w-md">
      <div class="text-center mb-8">
        <h1 class="text-2xl font-bold">10x Cards</h1>
        <p class="text-muted-foreground">Zaloguj się do swojego konta</p>
      </div>

      <div class="bg-card border rounded-lg shadow-sm p-6">
        <form action="/api/auth/login" method="POST" class="space-y-4">
          <div class="space-y-2">
            <label for="email" class="text-sm leading-none font-medium select-none"> Adres email </label>
            <input
              id="email"
              name="email"
              type="email"
              autocomplete="email"
              required
              class="file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive"
              placeholder="Wprowadź swój email"
            />
          </div>

          <div class="space-y-2">
            <label for="password" class="text-sm leading-none font-medium select-none"> Hasło </label>
            <input
              id="password"
              name="password"
              type="password"
              autocomplete="current-password"
              required
              class="file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive"
              placeholder="Wprowadź swoje hasło"
            />
          </div>

          <button
            type="submit"
            class="inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground shadow-xs hover:bg-primary/90 h-9 px-4 py-2 w-full"
          >
            Zaloguj się
          </button>

          <div class="text-center text-sm">
            <span class="text-muted-foreground">Nie masz konta? </span>
            <a href="/register" class="text-primary underline-offset-4 hover:underline font-medium">
              Zarejestruj się
            </a>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    // Handle form submission with fetch API for better UX
    document.addEventListener("DOMContentLoaded", function () {
      const form = document.querySelector("form");
      const submitButton = form?.querySelector('button[type="submit"]');

      if (form && submitButton) {
        form.addEventListener("submit", async function (e) {
          e.preventDefault();

          // Update button state
          const originalText = submitButton.textContent || "Zaloguj się";
          submitButton.textContent = "Logowanie...";
          submitButton.disabled = true;

          try {
            const formData = new FormData(form);
            const response = await fetch("/api/auth/login", {
              method: "POST",
              body: formData,
            });

            const data = await response.json();

            if (response.ok && data.success) {
              // Redirect on success
              window.location.href = "/generator";
            } else {
              // Show error
              const errorMessage = data.error || "Logowanie nie powiodło się";

              // Remove existing error messages
              const existingError = form.querySelector(".error-message");
              if (existingError) {
                existingError.remove();
              }

              // Add new error message
              const errorDiv = document.createElement("div");
              errorDiv.className =
                "error-message border border-destructive bg-destructive/10 text-destructive px-4 py-3 rounded-md mb-4";
              errorDiv.innerHTML = `
                <div class="flex items-center gap-2">
                  <svg class="h-4 w-4 shrink-0" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="12" cy="12" r="10"/>
                    <line x1="15" y1="9" x2="9" y2="15"/>
                    <line x1="9" y1="9" x2="15" y2="15"/>
                  </svg>
                  <span class="text-sm">${errorMessage}</span>
                </div>
              `;

              form.insertBefore(errorDiv, form.firstChild);
            }
          } catch {
            // console.error("Login error:", error);

            // Remove existing error messages
            const existingError = form.querySelector(".error-message");
            if (existingError) {
              existingError.remove();
            }

            // Add error message
            const errorDiv = document.createElement("div");
            errorDiv.className =
              "error-message border border-destructive bg-destructive/10 text-destructive px-4 py-3 rounded-md mb-4";
            errorDiv.innerHTML = `
              <div class="flex items-center gap-2">
                <svg class="h-4 w-4 shrink-0" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <circle cx="12" cy="12" r="10"/>
                  <line x1="15" y1="9" x2="9" y2="15"/>
                  <line x1="9" y1="9" x2="15" y2="15"/>
                </svg>
                <span class="text-sm">Wystąpił błąd podczas logowania. Spróbuj ponownie.</span>
              </div>
            `;

            form.insertBefore(errorDiv, form.firstChild);
          } finally {
            // Reset button state
            submitButton.textContent = originalText;
            submitButton.disabled = false;
          }
        });
      }
    });
  </script>
</Layout>
