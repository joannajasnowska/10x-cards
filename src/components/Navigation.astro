---
interface Props {
  activeItem?: "generator" | "flashcards";
}

const { activeItem } = Astro.props;
---

<header class="w-full bg-white border-b border-gray-200 sticky top-0 z-50">
  <div class="container mx-auto px-4 py-3 flex items-center justify-between">
    <!-- Logo and app name -->
    <a href="/" class="flex items-center space-x-2">
      <svg width="28" height="28" viewBox="0 0 28 28" class="w-7 h-7 text-primary">
        <!-- Three stacked cards that match the reference image -->
        <path
          d="M4,8 L12,8 C13.1046,8 14,8.89543 14,10 L14,20 C14,21.1046 13.1046,22 12,22 L4,22 C2.89543,22 2,21.1046 2,20 L2,10 C2,8.89543 2.89543,8 4,8 Z"
          fill="white"
          stroke="black"
          stroke-width="1"
          transform="rotate(-15, 8, 15)"></path>
        <path
          d="M10,4 L18,4 C19.1046,4 20,4.89543 20,6 L20,16 C20,17.1046 19.1046,18 18,18 L10,18 C8.89543,18 8,17.1046 8,16 L8,6 C8,4.89543 8.89543,4 10,4 Z"
          fill="white"
          stroke="black"
          stroke-width="1"
          transform="rotate(0, 14, 11)"></path>
        <path
          d="M16,6 L24,6 C25.1046,6 26,6.89543 26,8 L26,18 C26,19.1046 25.1046,20 24,20 L16,20 C14.8954,20 14,19.1046 14,18 L14,8 C14,6.89543 14.8954,6 16,6 Z"
          fill="white"
          stroke="black"
          stroke-width="1"
          transform="rotate(15, 20, 13)"></path>
      </svg>
      <span class="font-semibold text-lg">Fiszki</span>
    </a>

    <!-- Main navigation links -->
    <nav class="hidden sm:flex space-x-6">
      <a
        href="/generator"
        class={`font-medium transition-colors ${activeItem === "generator" ? "text-primary" : "text-gray-600 hover:text-primary"}`}
      >
        Generuj Fiszki
      </a>
      <a
        href="/flashcards"
        class={`font-medium transition-colors ${activeItem === "flashcards" ? "text-primary" : "text-gray-600 hover:text-primary"}`}
      >
        Moje Fiszki
      </a>
    </nav>

    <!-- User menu -->
    <div class="flex items-center">
      <button
        id="user-menu-button"
        class="flex items-center space-x-1 text-gray-600 hover:text-primary transition-colors"
        aria-expanded="false"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="w-5 h-5"
        >
          <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"></path>
          <circle cx="12" cy="7" r="4"></circle>
        </svg>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="w-4 h-4"
        >
          <path d="m6 9 6 6 6-6"></path>
        </svg>
      </button>

      <!-- Dropdown menu (hidden by default) -->
      <div
        id="user-dropdown"
        class="absolute right-4 mt-40 w-48 bg-white rounded-md shadow-lg py-1 hidden"
        role="menu"
        aria-orientation="vertical"
        aria-labelledby="user-menu-button"
      >
        <a href="/profile" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" role="menuitem"> Profil </a>
        <button
          type="button"
          id="logout-button"
          class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
          role="menuitem"
        >
          Wyloguj
        </button>
      </div>
    </div>

    <!-- Mobile menu button -->
    <button
      id="mobile-menu-button"
      type="button"
      class="sm:hidden inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-primary hover:bg-gray-100 focus:outline-none"
      aria-controls="mobile-menu"
      aria-expanded="false"
    >
      <span class="sr-only">Otw√≥rz menu</span>
      <svg
        id="menu-icon-open"
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
        class="h-6 w-6"
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>
      <svg
        id="menu-icon-close"
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
        class="hidden h-6 w-6"
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
  </div>

  <!-- Mobile menu, hidden by default -->
  <div id="mobile-menu" class="sm:hidden hidden">
    <div class="px-2 pt-2 pb-3 space-y-1">
      <a
        href="/generator"
        class={`block px-3 py-2 rounded-md font-medium ${activeItem === "generator" ? "bg-gray-100 text-primary" : "text-gray-600 hover:bg-gray-100 hover:text-primary"}`}
      >
        Generator Fiszek
      </a>
      <a
        href="/flashcards"
        class={`block px-3 py-2 rounded-md font-medium ${activeItem === "flashcards" ? "bg-gray-100 text-primary" : "text-gray-600 hover:bg-gray-100 hover:text-primary"}`}
      >
        Moje Fiszki
      </a>
    </div>
  </div>
</header>

<script>
  // Toggle mobile menu
  const mobileMenuButton = document.getElementById("mobile-menu-button");
  const mobileMenu = document.getElementById("mobile-menu");
  const menuIconOpen = document.getElementById("menu-icon-open");
  const menuIconClose = document.getElementById("menu-icon-close");

  mobileMenuButton?.addEventListener("click", () => {
    const expanded = mobileMenuButton.getAttribute("aria-expanded") === "true";
    mobileMenuButton.setAttribute("aria-expanded", (!expanded).toString());
    mobileMenu?.classList.toggle("hidden");
    menuIconOpen?.classList.toggle("hidden");
    menuIconClose?.classList.toggle("hidden");
  });

  // Toggle user dropdown
  const userMenuButton = document.getElementById("user-menu-button");
  const userDropdown = document.getElementById("user-dropdown");

  userMenuButton?.addEventListener("click", () => {
    const expanded = userMenuButton.getAttribute("aria-expanded") === "true";
    userMenuButton.setAttribute("aria-expanded", (!expanded).toString());
    userDropdown?.classList.toggle("hidden");
  });

  // Close the dropdown when clicking outside
  document.addEventListener("click", (event) => {
    if (
      userMenuButton &&
      userDropdown &&
      !userMenuButton.contains(event.target as Node) &&
      !userDropdown.contains(event.target as Node)
    ) {
      userMenuButton.setAttribute("aria-expanded", "false");
      userDropdown.classList.add("hidden");
    }
  });

  // Handle logout
  const logoutButton = document.getElementById("logout-button");
  logoutButton?.addEventListener("click", () => {
    // Add logout functionality here
    console.log("Logout clicked");
  });
</script>
